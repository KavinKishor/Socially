// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  clerkId   String    @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Relations
  post      Post[]
  comments  Comment[]
  likes     Like[]

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  notification         Notification[] @relation("userNotifications") // notification received
  notificationsCreated Notification[] @relation("notificationCreator") //notification triiggered by user 
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) //delete all post if the user is deleted
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId]) // Index for faster lookups-composit index 
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  //Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // Ensure a user can like a post only once
  @@index([userId, postId]) // Index for faster lookups-composit index
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // Composite primary key to ensure uniqueness - a user can follow another user only once
  @@index([followerId, followingId]) // Index for faster lookups-composit index
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // The user who receives the notification
  creatorId String // The user who triggered the notification (e.g., the author of the post/comment)
  type      NotificationType
  read      Boolean          @default(false) // Whether the notification has been read

  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  //Relations
  user    User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  Like
  COMMENT
  FOLLOW
}
